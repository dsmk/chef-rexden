#!/bin/sh 
#
# Script to archive the configs.  
# We set up a meta language:
#
# do /etc
# do /var/named
# do /home/mythtv/.lircrc
# cmd fdisk /sbin/fdisk -l
# cmd devlist /bin/ls -l /dev
# cmd 
#
#set -x 
app_name=`basename $0`

debug=
TRACE=false
execute_args=false
# set this to true if we want to syslog what we are doing (otherwise use -S)
output=_print_it
syslog_it=false
#
log_facility=local4
log_file=
# this is the default class if there is no classname or if "class default" is set
# the current values are:
#   sync      Synchronize
#   verify    Verify what would be transfered
#   default   Do the default action
default_class=sync
# when this is set we force the class to be its value
force_class=

busync_file=/tmp/busync.$$
if [ -x /usr/bin/rsync ]; then
  rsync=/usr/bin/rsync
elif [ -x /usr/local/IT/bin/rsync ]; then
  rsync=/usr/local/IT/bin/rsync
else
  echo "can not find rsync, aborting"
  exit
fi
rsync_key="/root/.ssh/push-backup"
rsync_opts="-arv --delete "
rsync_debug=

ark_host="backup@fawkes.rexden.us"
ark_dest_root="${ark_host}::push"
default_conf_dir="/etc/ark.d"

Usage () {
  cat <<EOF
${app_name} <opts> <files>
opts include:
  -z  --size    Download stats on the size of this hosts archive
  -n  --test    Don't actually transfer - just print what we would do
  -d  --debug   Don't even run rsync
  -t  --trace   Output trace commands
  -v  --verbose Additional debugging
  -S  --syslog  Syslog output
  -P  --print   Print the output (default)
  -L  --log     Log data into file
  -R <root>     Use a different log root
  -e            Do an inline command on the command line
  
                
The various actions are:

ark <src> [<dest>]

cmd <name> <cmd>

date=5/28/2015
EOF
}

_trace_it () {
  if $TRACE ; then
    $output info "${busync_name}" -- "trace: " "$@"
  fi
  #echo "_trace_it"
}

_logfile_it () {
  li_level="$1"
  shift
  li_name="$1"
  shift
  li_file="$1"
  
  if [ "x$li_file" != "x--" ]; then
    echo "$li_level $li_name: from  $li_file" >>${log_file}
    cat "${li_file}" >>${log_file}
  else
    echo "$li_level $li_name: $@" >>${log_file}
  fi
}

_print_it () {
  #set +x
  pi_level="$1"
  shift
  pi_name="$1"
  shift
  pi_file="$1"
  
  if [ "x$pi_file" != "x--" ]; then
    echo "$pi_level $pi_name: from  $pi_file"
    if [ -r "${pi_file}" ]; then
      cat "${pi_file}"
    fi
  else
    echo "$pi_level $pi_name: $@"
  fi
  #set -x
}

_syslog_it () {
  if $syslog_it; then
    si_level="$1"
    shift
    si_name="$1"
    shift
    si_file="$1"
  
    if [ "x$si_file" != "x--" ]; then
      if [ -r "$si_file" ]; then
        logger -p "${log_facility}.${si_level}" -t "ark_${si_name}.$$" -f ${si_file}
      fi
    else
      logger -p "${log_facility}.${si_level}" -t "ark_${si_name}.$$" "$@"
    fi
  fi
}

_sync_it () {
  $d_debug $rsync $rsync_opts -e "ssh -i $rsync_key" "$@"
}

# cmd <name> <cmd>
cmd () {
  _trace_it "# cmd $@"
  cmd_name="$1"
  shift
  tmp_root="/tmp/ark.$$"
  if [ ! -d "$tmp_root" ]; then
    mkdir "$tmp_root"
  fi
  arkcnf_log="${tmp_root}/$cmd_name"
  if [ "x$debug" = "x" ]; then
    echo "cmd: $@" >"$arkcnf_log" 
    echo "========" >>"$arkcnf_log"
    "$@" >>"$arkcnf_log" 2>&1
  else
    echo "$@" " >$arkcnf_log 2>&1"
  fi
  (cd $tmp_root; _sync_it "$cmd_name" "$ark_dest_root")
  rm -rf "$tmp_root"
}

# ark <src> 
ark () {
  _trace_it "# ark $1 $2"
  do_src="$1"
  do_dest="$2"
  if [ "x$do_dest" = "x" ]; then
    do_dest="$do_src"
  fi
  do_dest="${ark_dest_root}/$do_dest"
  # only do this if do_src exists
  if [ ! -r "$do_src" ]; then
    _trace_it "#   skipping $do_src"
    return
  fi
  if [ -d "$do_src" ]; then
    # source is a directory so 
    do_src="${do_src}/"
  fi
  arkcnf_log="/var/tmp/arkcnf.log.$$"
  #$d_debug $rsync $rsync_opts -e "ssh -i $rsync_key" "$do_src" "$ark_dest_root" >${arkcnf_log} 2>&1
  $d_debug $rsync $rsync_opts -e "ssh -i $rsync_key" "$do_src" "$do_dest" >${arkcnf_log} 2>&1
  do_ret="$?"
  $output info "$do_src -- do_ret=$do_ret"
  if [ "x$do_ret" = "x0" ]; then
    # success
    $output info "$do_src" -- "success"
    $output info "$do_src" "$arkcnf_log"
    do_lines=`_num_files_updated "$arkcnf_log" `
    if [ "x$do_lines" != "x" ]; then
      $output info "$do_src" -- "Totaling $do_lines items"
    fi
  else
    # failure
    $output notice "$do_src" -- 'failure'
    $output notice "$do_src" "$arkcnf_log"
  fi
  rm "$arkcnf_log"
}


_num_files_updated () {
  nfu_file="$1"
  if [ "x$opt_X" != "x" ]; then
    echo "***********************" 1>&2
    echo "***********************" 1>&2
    echo "***********************" 1>&2
    egrep -v <"$nfu_file" \
      '^(total size is|wrote |building file list)' | \
      grep -v '^ *$' 1>&2
    echo "***********************" 1>&2
    echo "***********************" 1>&2
    echo "***********************" 1>&2
  fi
  egrep -v <"$nfu_file" \
    '^(total size is|wrote |building file list)' | \
    grep -v '^ *$' | wc -l | sed 's; *;;g' 
}

parse_opts () {
  #set -x
  firstchar=`echo " $1" | cut -c2 `
  while [ "x$firstchar" = "x-" ]; do
    case "$1" in
      --test|-n)
        debug=echo
        rsync_opts="${rsync_opts} -n "
        ;;
      --size|-z)
        ssh -i "$rsync_key" "$ark_host" size
	exit
        ;;
      --debug|-d)
        debug=echo
        d_debug=echo
        ;;
      --trace|-t)
        TRACE=true
        ;;
      --verbose|-v)
        rsync_opts="${rsync_opts} -v"
        ;;
      --verify|-V)
        force_class="verify"
        ;;
      --default|-D)
        shift
        default_class="$1"
        ;;
      --class|-C)
        shift
        force_class="$1"
        ;;
      --syslog|-S)
        syslog_it=true
        output=_syslog_it
        ;;
      --print|-P)
        output=_print_it
        ;;
      --root|-R)
        shift
        ark_dest_root="$1"
        ;;
      --log|-L) 
        output=_logfile_it
        shift
        log_file="$1"
        now=`/bin/date`
        echo "=======================" >>${log_file}
        echo "Starting $now" >>${log_file}
        ;;
      --nosyslog|-N)
        syslog_it=false
        ;;
      --opt_X|-X)
        opt_X=yes
        ;;
      -e)
        execute_args=true
        ;;
      *) 
        Usage
        exit
        ;;
    esac
    shift
    firstchar=`echo " $1" | cut -c2 `
  done
  #echo "*** all_files=${all_files}"
  if [ "x$1" = "x" ]; then
    all_files="$default_conf_dir"
  else
    all_files="${all_files} $@"
  fi
}

do_file () {
  df_file="$1"
  if [ "x$1" != "x" ]; then
    if [ -d "$1" ]; then
      _trace_it "# do_dir $1"
      for file in $1/*.s ; do
        do_file "$file"
      done
    elif [ -f "$df_file" ]; then
      #set -x 
      #echo "before"
      _trace_it "# do_file $df_file"
      #echo "after"
      . "$df_file"
      #echo "really after"
      #set +x
    fi
  fi
}

#echo "$@"

all_files=
firstchar=`echo " $1" | cut -c2 `
#if [ "x$firstchar" != "x-" -a "x$firstchar" != "x" ]; then
if [ "x$firstchar" != "x-" ]; then
  all_files="$1"
  shift
fi

parse_opts "$@" 
# if the archive root does not exist then abort
if $execute_args ; then
  #set -x
  $all_files
  #set +x
else
  for f in $all_files ; do
    do_file "$f"
  done
fi
